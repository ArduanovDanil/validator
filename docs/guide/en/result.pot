#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-20 21:44+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.12.2\n"

#: result.md%2Bheading
msgid "Result test changes for test 1"
msgstr ""

#: result.md%2Bp
msgid ""
"The validation's result is an object containing of errors occurred during "
"validation."
msgstr ""

#: result.md%2Bheading
msgid "Is validation successful?"
msgstr ""

#: result.md%2Bp
msgid ""
"To just check the status of validation (whether a data is valid as a whole), "
"use the following `Result` API call:"
msgstr ""

#: result.md%2Bp
msgid "It can be narrowed down to a specific attribute:"
msgstr ""

#: result.md%2Bheading
msgid "Errors"
msgstr ""

#: result.md%2Bp
msgid ""
"Most of the time telling only the status of validation is not enough. There "
"are multiple methods to get detailed errors list with their data from the "
"result. The difference between them is in the grouping, filtering, and "
"representation of every error. Choose one to fit your needs depending on the "
"situation."
msgstr ""

#: result.md%2Bheading
msgid "Flat list of error messages"
msgstr ""

#: result.md%2Bp
msgid ""
"One of the simplest cases is getting a flat list of all error messages. Use "
"the following `Result` API call:"
msgstr ""

#: result.md%2Bp
msgid "An example of output with `age` and `email` attributes:"
msgstr ""

#: result.md%2Bp
msgid ""
"It's easy to display and iterate, however, with a bigger amount of "
"attributes and depending on a message, it can be problematic to understand "
"which attribute an error belongs to."
msgstr ""

#: result.md%2Bheading
msgid "Error messages not bound to a specific attribute"
msgstr ""

#: result.md%2Bp
msgid ""
"Sometimes error messages are not related to a specific attribute. It can "
"happen during the validation of multiple attributes depending on each other "
"for example. Use the following `Result` API call:"
msgstr ""

#: result.md%2Bp
msgctxt "result.md+p"
msgid "The output for example above:"
msgstr ""

#: result.md%2Bheading
msgctxt "result.md+heading"
msgid "Filtering by a specific attribute"
msgstr ""

#: result.md%2Bp
msgctxt "result.md+p"
msgid ""
"This list can be also filtered by a specific attribute. Only top-level "
"attributes are supported."
msgstr ""

#: result.md%2Bheading
msgid "Error messages indexed by attribute"
msgstr ""

#: result.md%2Bp
msgid ""
"To group error messages by attribute, use the following `Result` API call:"
msgstr ""

#: result.md%2Bp
msgctxt "result.md+p"
msgid "An example of output:"
msgstr ""

#: result.md%2Bp
msgid ""
"Note that the result is always a 2-dimensional array with attribute names as "
"keys at the first nesting level. This means that further nesting of "
"attributes is not supported (but could be achieved by using "
"[`getErrorMessagesIndexedByPath()`]{1}). Returning to the previous example, "
"when `name` and `email` belong to a `user` attribute, the output will be:"
msgstr ""

#: result.md%2Bp
msgid ""
"Also keep in mind that attribute names are always strings, even when used "
"with `Each`:"
msgstr ""

#: result.md%2Bp
msgid "Given `[21, 22, 23, 20]` input, the output will be:"
msgstr ""

#: result.md%2Bheading
msgid "Error messages indexed by path"
msgstr ""

#: result.md%2Bp
msgid ""
"This is probably the most advanced representation offered by built-in "
"methods. The grouping is done by path - a concatenated attribute sequence "
"showing the location of errored value within a data structure. A separator "
"is customizable, dot notation is set as the default one. Use the following "
"`Result` API call:"
msgstr ""

#: result.md%2Bp
msgid ""
"A path can contain integer elements too (when using the `Each` rule for "
"example):"
msgstr ""

#: result.md%2Bheading
msgid "Resolving special characters collision in attribute names"
msgstr ""

#: result.md%2Bp
msgid ""
"When the attribute name in the error messages list contains a path separator "
"(dot `.` by default), it is automatically escaped using a backslash (`\\`):"
msgstr ""

#: result.md%2Bp
msgid ""
"In case of using a single attribute per rule set, any additional "
"modifications of attribute names in the rules configuration are not "
"required, so they must stay as is:"
msgstr ""

#: result.md%2Bp
msgid ""
"However, when using the `Nested` rule with multiple attributes per rule set, "
"special characters need to be escaped with a backslash (`\\`) for value "
"paths to be correct and to be possible to reverse them back from string to "
"individual items. See the [Using keys containing separator / shortcut] "
"section for more details."
msgstr ""

#: result.md%2Bp
msgid "This can be used as an alternative to using a custom separator."
msgstr ""

#: result.md%2Bheading
msgid "Error objects list"
msgstr ""

#: result.md%2Bp
msgid ""
"When even these representations are not enough, an initial unmodified list "
"of error objects can be accessed via this method:"
msgstr ""

#: result.md%2Bp
msgid "Each error stores the following data:"
msgstr ""

#: result.md%2Blist-item.p
msgid ""
"Message. Either a simple message like `This value is wrong.` or a template "
"with placeholders enclosed in curly braces (`{}`), for example: `Value must "
"be no less than {min}.`. The actual formatting is done in `Validator` "
"depending on the configured translator."
msgstr ""

#: result.md%2Blist-item.p
msgid ""
"Template parameters for substitution during formatting, for example: `['min' "
"=> 7]`."
msgstr ""

#: result.md%2Blist-item.p
msgid ""
"A path to a value within a checked data structure, for example: `['user', "
"'name', 'firstName']`."
msgstr ""

#: result.md%2Bheading
msgid "An example of an application"
msgstr ""

#: result.md%2Bp
msgid ""
"What this can be useful for? For example, to build a nested tree of error "
"messages indexed by attribute names:"
msgstr ""

#: result.md%2Bp
msgid ""
"It's intentionally not provided out of the box due to the complexity of "
"iteration. However, this can be useful for dumping as JSON and storing in "
"logs for example."
msgstr ""

#: result.md%2Bp
msgid "Debugging original error objects is also more convenient."
msgstr ""

#: result.md%2Blinkref.link-label
msgid "Using keys containing separator / shortcut"
msgstr ""
